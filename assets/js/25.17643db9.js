(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{343:function(_,v,t){"use strict";t.r(v);var a=t(1),r=Object(a.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h2",{attrs:{id:"_1、核心技术模块"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1、核心技术模块"}},[_._v("#")]),_._v(" 1、核心技术模块")]),_._v(" "),v("h3",{attrs:{id:"_1-1-基本概念和典型产品"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-基本概念和典型产品"}},[_._v("#")]),_._v(" 1.1 基本概念和典型产品")]),_._v(" "),v("p",[_._v("OLAP（Online Analytical Processing）是一种用于分析和查询大规模数据的技术和方法。它是一种基于多维数据模型的分析方法，通过对多维数据集进行快速、灵活的查询和汇总，支持复杂的数据分析和决策支持。")]),_._v(" "),v("p",[_._v("OLAP技术通常用于处理和分析大量的事实数据（例如销售数据、金融数据、客户数据等）以及与这些数据相关的维度信息（例如时间、地理位置、产品类别等）。它可以提供多维数据的直观可视化，帮助用户发现数据中的模式、趋势和关联。")]),_._v(" "),v("p",[_._v("OLAP的主要特点包括：")]),_._v(" "),v("ol",[v("li",[_._v("多维数据模型：OLAP使用多维数据模型来组织和表示数据，通常采用星型模型或雪花模型。多维数据模型将数据组织为维度和度量值的交叉点，方便进行灵活的分析和查询。")]),_._v(" "),v("li",[_._v("多维数据查询：OLAP提供丰富的查询和分析功能，例如切片（Slicing）、切块（Dicing）、旋转（Pivoting）和钻取（Drill-Down/Up），支持多个维度的组合和数据的深入分析。")]),_._v(" "),v("li",[_._v("高性能和快速响应：OLAP引擎采用预计算和聚合的方式，在查询时能够快速响应，即使在处理大规模数据集时也能提供高性能的分析能力。")]),_._v(" "),v("li",[_._v("可视化和报表：OLAP技术通常与可视化工具和报表生成工具结合使用，可以创建交互式的数据报表和图表，直观地展示数据分析结果。")]),_._v(" "),v("li",[_._v("决策支持：OLAP提供丰富的数据分析和查询能力，支持用户进行复杂的数据挖掘、趋势分析、预测和决策支持。")])]),_._v(" "),v("p",[v("strong",[_._v("OLAP和用户行为分析是在不同层面上对数据进行分析的方法。OLAP通过多维数据模型和数据聚合提供了全局的数据视角，而用户行为分析则关注特定的用户行为数据，通过深入分析用户行为路径和行为模式来获得洞察和决策支持")]),_._v("。两者可以结合使用，相互补充，以提供全面的数据分析和决策支持能力。")]),_._v(" "),v("p",[_._v("OLAP按存储器的数据存储格式分为"),v("strong",[_._v("ROLAP（Relational OLAP）、MOLAP（Multi-dimensional OLAP）和 HOLAP（Hybrid OLAP）")]),_._v("。")]),_._v(" "),v("center",[v("img",{attrs:{src:"/donot-eat-fish/img/data_analysis/olap/03_olap_catrgory_01.png",width:"80%"}})]),_._v(" "),v("h3",{attrs:{id:"_1-2-常见产品对比"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-常见产品对比"}},[_._v("#")]),_._v(" 1.2 常见产品对比")]),_._v(" "),v("table",[v("thead",[v("tr",[v("th"),_._v(" "),v("th",[_._v("Doris")]),_._v(" "),v("th",[_._v("ClickHouse")]),_._v(" "),v("th",[_._v("Druid")]),_._v(" "),v("th",[_._v("Kylin")]),_._v(" "),v("th",[_._v("Impala")]),_._v(" "),v("th",[_._v("Greenplum")]),_._v(" "),v("th",[_._v("Presto/Trino")])])]),_._v(" "),v("tbody",[v("tr",[v("td",[_._v("简介")]),_._v(" "),v("td",[_._v("Apache Doris是一款基于MPP架构的高性能、实时的分析型数据库，有着极速易用的有点，海量数据下亚秒级响应，支持高并发和高吞吐场景。能够较好的满足报表分析、即席查询、统一数仓构建、数据湖联邦查询加速等场景。")]),_._v(" "),v("td",[_._v("ClickHouse是一个开源的列式数据库，也是MPP架构，用于实施分析数据报告和OLAP，ClickHouse设计用于处理实时查询大规模数据，包括单台服务器的TB甚至PB级别数据。")]),_._v(" "),v("td",[_._v("Druid是一种实时分析数据库，设计用于处理大规模流失数据，可以实时摄取、存储和查询数据，支持高速写入和实时分析。")]),_._v(" "),v("td",[_._v("Kylin是一个开源分布式分析引擎，提供SQL接口和多维OLAP能力，通过与计算的方式提高查询速度。")]),_._v(" "),v("td",[_._v("Impala是一个开源的MPPSQL查询引擎，可以直接查询Hadoop上的数据，不需要进行数据搬迁，常和Kudu配合使用。")]),_._v(" "),v("td",[_._v("GP是一个基于PostgreSQL的MPP数据库，可以处理PB级别的数据，提供了高速数据读取、写入和分析，支持各种数据分析工作负载。")]),_._v(" "),v("td",[_._v("Presto设计用于处理快速、实时的分析查询，可以查询多种数据源的数据，可以联邦查询分析。")])]),_._v(" "),v("tr",[v("td",[_._v("定位")]),_._v(" "),v("td",[_._v("实时OLAP数据库")]),_._v(" "),v("td",[_._v("实时OLAP数据库")]),_._v(" "),v("td",[_._v("实时OLAP数据库")]),_._v(" "),v("td",[_._v("基于Cube的OLAP引擎")]),_._v(" "),v("td",[_._v("MPP查询引擎")]),_._v(" "),v("td",[_._v("OLAP数据库")]),_._v(" "),v("td",[_._v("MPP查询引擎")])]),_._v(" "),v("tr",[v("td",[_._v("查询性能")]),_._v(" "),v("td",[_._v("单表查询和Join查询性能高")]),_._v(" "),v("td",[_._v("单表查询性能高，Join性能不高")]),_._v(" "),v("td",[_._v("中")]),_._v(" "),v("td",[_._v("预计算模型查询非常快")]),_._v(" "),v("td",[_._v("中")]),_._v(" "),v("td",[_._v("中")]),_._v(" "),v("td",[_._v("中")])]),_._v(" "),v("tr",[v("td",[_._v("查询并发")]),_._v(" "),v("td",[_._v("高，行列混存，单节点上万QPS")]),_._v(" "),v("td",[_._v("低")]),_._v(" "),v("td",[_._v("中")]),_._v(" "),v("td",[_._v("高")]),_._v(" "),v("td",[_._v("中")]),_._v(" "),v("td",[_._v("较低，小查询会消耗大量集群资源")]),_._v(" "),v("td",[_._v("中")])]),_._v(" "),v("tr",[v("td",[_._v("SQL语法丰富度")]),_._v(" "),v("td",[_._v("支持标准SQL和MySQL语法兼容")]),_._v(" "),v("td",[_._v("不支持标准SQL，带方言")]),_._v(" "),v("td",[_._v("有限")]),_._v(" "),v("td",[_._v("支持标准SQL")]),_._v(" "),v("td",[_._v("支持标准SQL")]),_._v(" "),v("td",[_._v("PostgreSQL")]),_._v(" "),v("td",[_._v("标准SQL")])]),_._v(" "),v("tr",[v("td",[_._v("Join支持")]),_._v(" "),v("td",[_._v("支持，分布式Join")]),_._v(" "),v("td",[_._v("有限，不支持分布式Join")]),_._v(" "),v("td",[_._v("不支持")]),_._v(" "),v("td",[_._v("支持")]),_._v(" "),v("td",[_._v("支持")]),_._v(" "),v("td",[_._v("支持")]),_._v(" "),v("td",[_._v("支持")])]),_._v(" "),v("tr",[v("td",[_._v("离线数据导入")]),_._v(" "),v("td",[_._v("支持")]),_._v(" "),v("td",[_._v("支持")]),_._v(" "),v("td",[_._v("支持")]),_._v(" "),v("td",[_._v("支持")]),_._v(" "),v("td",[_._v("-")]),_._v(" "),v("td",[_._v("支持")]),_._v(" "),v("td",[_._v("-")])]),_._v(" "),v("tr",[v("td",[_._v("实时数据导入")]),_._v(" "),v("td",[_._v("支持")]),_._v(" "),v("td",[_._v("支持")]),_._v(" "),v("td",[_._v("支持")]),_._v(" "),v("td",[_._v("支持")]),_._v(" "),v("td",[_._v("-")]),_._v(" "),v("td",[_._v("支持")]),_._v(" "),v("td",[_._v("-")])]),_._v(" "),v("tr",[v("td",[_._v("聚合查询")]),_._v(" "),v("td",[_._v("支持")]),_._v(" "),v("td",[_._v("支持")]),_._v(" "),v("td",[_._v("支持")]),_._v(" "),v("td",[_._v("支持")]),_._v(" "),v("td",[_._v("支持")]),_._v(" "),v("td",[_._v("支持")]),_._v(" "),v("td",[_._v("支持")])]),_._v(" "),v("tr",[v("td",[_._v("明细/点查询")]),_._v(" "),v("td",[_._v("支持")]),_._v(" "),v("td",[_._v("支持")]),_._v(" "),v("td",[_._v("不支持")]),_._v(" "),v("td",[_._v("有限，依赖与计算")]),_._v(" "),v("td",[_._v("支持")]),_._v(" "),v("td",[_._v("支持")]),_._v(" "),v("td",[_._v("支持")])]),_._v(" "),v("tr",[v("td",[_._v("Adhoc查询")]),_._v(" "),v("td",[_._v("支持")]),_._v(" "),v("td",[_._v("支持")]),_._v(" "),v("td",[_._v("不支持，依赖预建模")]),_._v(" "),v("td",[_._v("有限，依赖与计算")]),_._v(" "),v("td",[_._v("支持")]),_._v(" "),v("td",[_._v("支持")]),_._v(" "),v("td",[_._v("支持")])]),_._v(" "),v("tr",[v("td",[_._v("数据湖联邦查询")]),_._v(" "),v("td",[_._v("支持，通过Catallog支持异构数据源")]),_._v(" "),v("td",[_._v("支持有限")]),_._v(" "),v("td",[_._v("不支持")]),_._v(" "),v("td",[_._v("不支持")]),_._v(" "),v("td",[_._v("支持")]),_._v(" "),v("td",[_._v("不支持")]),_._v(" "),v("td",[_._v("丰富支持")])]),_._v(" "),v("tr",[v("td",[_._v("数据更新")]),_._v(" "),v("td",[_._v("支持")]),_._v(" "),v("td",[_._v("支持有限")]),_._v(" "),v("td",[_._v("不支持")]),_._v(" "),v("td",[_._v("不支持")]),_._v(" "),v("td",[_._v("-")]),_._v(" "),v("td",[_._v("支持")]),_._v(" "),v("td",[_._v("-")])]),_._v(" "),v("tr",[v("td",[_._v("任意列更新")]),_._v(" "),v("td",[_._v("支持")]),_._v(" "),v("td",[_._v("不支持")]),_._v(" "),v("td",[_._v("不ichi")]),_._v(" "),v("td",[_._v("不支持")]),_._v(" "),v("td",[_._v("-")]),_._v(" "),v("td",[_._v("不支持")]),_._v(" "),v("td")]),_._v(" "),v("tr",[v("td",[_._v("表结构更新")]),_._v(" "),v("td",[_._v("毫秒级更新，变更包结构不影响在线运行")]),_._v(" "),v("td",[_._v("支持")]),_._v(" "),v("td",[_._v("不支持")]),_._v(" "),v("td",[_._v("不支持")]),_._v(" "),v("td",[_._v("-")]),_._v(" "),v("td",[_._v("支持")]),_._v(" "),v("td",[_._v("-")])]),_._v(" "),v("tr",[v("td",[_._v("是否依赖Hadoop")]),_._v(" "),v("td",[_._v("不依赖")]),_._v(" "),v("td",[_._v("不依赖")]),_._v(" "),v("td",[_._v("不依赖")]),_._v(" "),v("td",[_._v("Kylin4前依赖Hbase")]),_._v(" "),v("td",[_._v("依赖")]),_._v(" "),v("td",[_._v("不依赖")]),_._v(" "),v("td",[_._v("不依赖")])]),_._v(" "),v("tr",[v("td",[_._v("是否依赖Zookeeper")]),_._v(" "),v("td",[_._v("不依赖")]),_._v(" "),v("td",[_._v("依赖")]),_._v(" "),v("td",[_._v("依赖")]),_._v(" "),v("td",[_._v("不依赖")]),_._v(" "),v("td",[_._v("不依赖")]),_._v(" "),v("td",[_._v("不依赖")]),_._v(" "),v("td",[_._v("不依赖")])]),_._v(" "),v("tr",[v("td",[_._v("运维成本")]),_._v(" "),v("td",[_._v("低")]),_._v(" "),v("td",[_._v("高")]),_._v(" "),v("td",[_._v("高")]),_._v(" "),v("td",[_._v("中")]),_._v(" "),v("td",[_._v("中")]),_._v(" "),v("td",[_._v("中")]),_._v(" "),v("td",[_._v("低")])])])]),_._v(" "),v("h3",{attrs:{id:"_1-3-doris整体架构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-doris整体架构"}},[_._v("#")]),_._v(" 1.3 Doris整体架构")]),_._v(" "),v("p",[_._v("Doris"),v("strong",[_._v("整体架构")]),_._v("如下图所示，Doris 架构非常简单，只有两类进程")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("Frontend（FE）")]),_._v("，主要负责用户请求的接入、查询解析规划、元数据的管理、节点管理相关工作。")]),_._v(" "),v("li",[v("strong",[_._v("Backend（BE）")]),_._v("，主要负责数据存储、查询计划的执行。")])]),_._v(" "),v("center",[v("img",{attrs:{src:"/donot-eat-fish/img/data_analysis/olap/00_doris_tech_struct.png",width:"80%"}})]),_._v(" "),v("h3",{attrs:{id:"_1-4-clickhouse整体架构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-clickhouse整体架构"}},[_._v("#")]),_._v(" 1.4 ClickHouse整体架构")]),_._v(" "),v("p",[_._v("ClickHouse对库、表的管理都是在存储节点级别独立的，集群中各节点之间的库、表元数据信息没有一致性约束，原因是因为其独特的架构：")]),_._v(" "),v("ul",[v("li",[_._v("通过SLB后各自Shard，各节点之间完全没有相互依赖")]),_._v(" "),v("li",[_._v("节点完全对等，集群中的节点角色统一，ClickHouse没有传统MPP数据库中的前端节点、Worker节点、元数据节点等概念")]),_._v(" "),v("li",[_._v("ClickHouse的这种架构特色决定它可以敏捷化、小规模部署，集群可以任意进行分裂、合并。前提要求是感知数据在集群节点上的分布")])]),_._v(" "),v("p",[v("strong",[_._v("每一个节点都可以承载查询请求和写入请求，以及后台的数据计算和操作，每个集群包含一个或多个分片（Shard），每个分片内部包含1个或多个副本")]),_._v("。")]),_._v(" "),v("center",[v("img",{attrs:{src:"/donot-eat-fish/img/data_analysis/olap/00_clickhouse_tech_struct.png",width:"80%"}})]),_._v(" "),v("h3",{attrs:{id:"_1-5-trino整体架构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-trino整体架构"}},[_._v("#")]),_._v(" 1.5 Trino整体架构")]),_._v(" "),v("p",[_._v("Trino集群有Coordinator和Worker两种角色：")]),_._v(" "),v("center",[v("img",{attrs:{src:"/donot-eat-fish/img/data_analysis/olap/00_trino_tech_struct.png",width:"80%"}})]),_._v(" "),v("h3",{attrs:{id:"_1-6-sql查询的执行流程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-sql查询的执行流程"}},[_._v("#")]),_._v(" 1.6 SQL查询的执行流程")]),_._v(" "),v("center",[v("img",{attrs:{src:"/donot-eat-fish/img/data_analysis/olap/00_sql_query_exec_seq.png",width:"80%"}})]),_._v(" "),v("h3",{attrs:{id:"_1-7-查询优化器cbo"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-查询优化器cbo"}},[_._v("#")]),_._v(" 1.7 查询优化器CBO")]),_._v(" "),v("p",[_._v("数据库的查询优化器是数据库系统的一个关键组件，负责接收用户提交的SQL查询，并找出最有效的方法来执行该查询。"),v("strong",[_._v("有两种主要的优化：基于成本的优化(Cost-Based Optimization, CBO)和基于规则的优化(Rule-Based Optimization)")]),_._v("。")]),_._v(" "),v("center",[v("img",{attrs:{src:"/donot-eat-fish/img/data_analysis/olap/00_sql_query_optimization.png",width:"80%"}})]),_._v(" "),v("h3",{attrs:{id:"_1-8-物化视图"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-8-物化视图"}},[_._v("#")]),_._v(" 1.8 物化视图")]),_._v(" "),v("p",[_._v("物化视图是数据库中的一种对象，它包含了一个查询的结果集，并将这个结果集保存在数据库中。")]),_._v(" "),v("p",[_._v("与普通视图（仅保存查询的语句，实际执行时才计算结果）不同，物化视图在定义时就执行相关的查询并保存结果，之后对物化视图的访问直接读取保存的结果，而不需要再次执行查询。")]),_._v(" "),v("p",[_._v("优点：")]),_._v(" "),v("ul",[v("li",[_._v("物化视图可以提高查询性能，特别是复杂的查询和大数据集。")]),_._v(" "),v("li",[_._v("物化视图也可以被数据库的查询优化器用于查询充血，即将用户的查询重写为对物化视图的查询，以提高查询性能。")])]),_._v(" "),v("p",[_._v("缺点：")]),_._v(" "),v("ul",[v("li",[_._v("会占用额为的存储空间")]),_._v(" "),v("li",[_._v("当物化视图依赖的表的数据发生变化时，物化视图需要被更新，以保证其内容的正确性，这个更新操作可以在每次数据变化时立即执行，也可以定期执行。\n"),v("ul",[v("li",[_._v("立即更新可以保证物化视图的内容是种时最新的，但会增加数据变化的处理成本；")]),_._v(" "),v("li",[_._v("延迟更新可以减少数据变化的处理成本，但可能导致物化视图的内容不及时。")])])])]),_._v(" "),v("h3",{attrs:{id:"_1-9-计算层-计算架构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-9-计算层-计算架构"}},[_._v("#")]),_._v(" 1.9 计算层：计算架构")]),_._v(" "),v("p",[_._v("常见的计算架构有Gather、MapReduce/DAG架构、MPP架构。")]),_._v(" "),v("center",[v("img",{attrs:{src:"/donot-eat-fish/img/data_analysis/olap/00_calc_struct.png",width:"80%"}})]),_._v(" "),v("table",[v("thead",[v("tr",[v("th"),_._v(" "),v("th",[_._v("Scatter Gather架构")]),_._v(" "),v("th",[_._v("MapReduce/DAG架构")]),_._v(" "),v("th",[_._v("MPP架构")])])]),_._v(" "),v("tbody",[v("tr",[v("td",[_._v("特点")]),_._v(" "),v("td",[_._v("单节点汇聚")]),_._v(" "),v("td",[_._v("查询中罗盘（Spill to disk）")]),_._v(" "),v("td",[_._v("大规模并行计算")])]),_._v(" "),v("tr",[v("td",[_._v("技术原理")]),_._v(" "),v("td",[_._v("在Scatter节点，查询被发送到都过数据分区或者节点，每个节点独立地的处理查询，并生成局部结果，在Gather阶段所有的局部结果被收集并组合成最重结果。")]),_._v(" "),v("td",[_._v("任务之间需要等待，中间数据需要罗盘，通过任务级别的调度提供了容错性保证，可以中断恢复。")]),_._v(" "),v("td",[_._v("在多个处理或者计算节点之间并行执行任务，数据在内存中传输，通过并行任务提升整体计算性能。")])]),_._v(" "),v("tr",[v("td",[_._v("优点")]),_._v(" "),v("td",[_._v("实时查询速度快")]),_._v(" "),v("td",[_._v("通常用于大规模数据处理，数据转换和数据分析任务")]),_._v(" "),v("td",[_._v("查询性能快，支持多种计算模式")])]),_._v(" "),v("tr",[v("td",[_._v("缺点")]),_._v(" "),v("td",[_._v("不适合复杂的数据处理分析，不支持大表Join")]),_._v(" "),v("td",[_._v("作业持续时间长、性能较低")]),_._v(" "),v("td",[_._v("纯内存计算，一般没有容错机制")])]),_._v(" "),v("tr",[v("td",[_._v("典型组件")]),_._v(" "),v("td",[_._v("ElasticSearch"),v("br"),_._v("ClickHouse")]),_._v(" "),v("td",[_._v("Hive"),v("br"),_._v("Spark")]),_._v(" "),v("td",[_._v("Doris"),v("br"),_._v("Trino")])])])]),_._v(" "),v("h3",{attrs:{id:"_1-10-计算层-mpp执行模型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-10-计算层-mpp执行模型"}},[_._v("#")]),_._v(" 1.10 计算层：MPP执行模型")]),_._v(" "),v("ul",[v("li",[_._v("一个查询计划往往被切分为多个plan fragment，plan fragment之间通过添加Exchange来进行船体数据（shuffle）")]),_._v(" "),v("li",[_._v("通过节点间并行利用多机器进行计算、还可以痛殴节点内并行充分利用节点的多CPU资源。MPP架构就是充分利用分布式的特性，让算在的分布式的并行计算，同时task内部也可以做并行处理加速查询。")])]),_._v(" "),v("center",[v("img",{attrs:{src:"/donot-eat-fish/img/data_analysis/olap/00_mpp_calc_model.png.",width:"80%"}})]),_._v(" "),v("h3",{attrs:{id:"_1-11-计算层-火山模型-volcano"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-11-计算层-火山模型-volcano"}},[_._v("#")]),_._v(" 1.11 计算层：火山模型-volcano")]),_._v(" "),v("p",[_._v("火山模型 vs 向量化执行")]),_._v(" "),v("center",[v("img",{attrs:{src:"/donot-eat-fish/img/data_analysis/olap/00_volcano_vs_vectorized_exec.png",width:"80%"}})]),_._v(" "),v("table",[v("thead",[v("tr",[v("th"),_._v(" "),v("th",[_._v("火山模型（Volcano-style）")]),_._v(" "),v("th",[_._v("向量化执行（vectorized Execution）")])])]),_._v(" "),v("tbody",[v("tr",[v("td",[_._v("概念")]),_._v(" "),v("td",[_._v("数据库应用得最广泛的模型。SQL在解析完成后会形成AST,AST的每个节点为代数运算符Operator。火山模型把Operator看成迭代器，每个迭代器都会提供一个next0) 接口。一般Operator的next)接口实现分为三步:"),v("br"),_._v("1.调用子节点Operator的next()接口获取一行数据(元组 tuple):"),v("br"),_._v("2.对tuple进行Operator特定的处理(如filter或project等);"),v("br"),_._v("3.返回处理后的tuple;"),v("br"),_._v("因此，查询执行时会由查询树自顶向下的调用next() 接口,数据则自底向上的被拉取处理。火山模型的这种处理方式也称为拉取执行模型(Pull Based)。")]),_._v(" "),v("td",[_._v("基于向量(vector)的查询执行模式。查询操作器处理的是组记录(即向量),而不是单个元组。向量化查询引擎将数据分为批次(batch),每个批次包含多条记录。查询操作器次处理一个批次的数据,将整个批次的数据视为一个向量,并执行向量化操作。"),v("br"),_._v("1.大大减少火山模型中的虚函数调用数量，"),v("br"),_._v("2.以块为处理单位数据,提供了cache命中率;"),v("br"),_._v("3,多行并发处理,契合了CPU乱序执行与并发执行的特性;"),v("br"),_._v("4.同时处理多行数据,使SIMD有了用武之地。")])]),_._v(" "),v("tr",[v("td",[_._v("优缺点")]),_._v(" "),v("td",[_._v("具有很高的灵活性,可以很容易地实现各种查询操作符和优化策略!缺点是处理效率较低,因为操作符之间的元组传递和虚函数调用会引入额外的开销。")]),_._v(" "),v("td",[_._v("具有更高的查询性能,但实现复杂度较高")])])])]),_._v(" "),v("h3",{attrs:{id:"_1-12-计算层-向量化执行原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-12-计算层-向量化执行原理"}},[_._v("#")]),_._v(" 1.12 计算层：向量化执行原理")]),_._v(" "),v("h4",{attrs:{id:"_1-12-1-现代cpu特点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-12-1-现代cpu特点"}},[_._v("#")]),_._v(" 1.12.1 现代CPU特点")]),_._v(" "),v("ul",[v("li",[_._v("流水线：允许并发执行多个流水线，进一步提高CPU的计算能力")]),_._v(" "),v("li",[_._v("乱序执行：允许不具有依赖关系的指令并发执行，避免因为等待某个指令而阻塞运行")]),_._v(" "),v("li",[_._v("分支预测：CPU会对分支进行预测并根据预测选取下一步执行的路径，提前加载指令和数据。")]),_._v(" "),v("li",[_._v("分层存储：CPU周围设置了寄存器、L1/L2/L3缓存、内存和磁盘等多几缓存，数据越靠近CPU，计算速度越快。")]),_._v(" "),v("li",[_._v("SIMD等新硬件能力：SIMD即单指令多数据流，一次操作完成多组操作数的计算，可以进一步提升计算效率。")])]),_._v(" "),v("h4",{attrs:{id:"_1-12-2-向量化执行引擎"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-12-2-向量化执行引擎"}},[_._v("#")]),_._v(" 1.12.2 向量化执行引擎")]),_._v(" "),v("ul",[v("li",[_._v("向量化执行引擎"),v("strong",[_._v("主要特点事利用现代CPU的特性，如单指令多数据指令集和CPU缓存优化")]),_._v("，对数据进行高效处理，相较于传统的元组处理方式（如火山模型），向量化执行引擎通过对大量数据进行批量处理，可以"),v("strong",[_._v("显著提高数据库查询的性能。")])]),_._v(" "),v("li",[_._v("向量化执行引擎的"),v("strong",[_._v("核心原理是将数据以列式（Columnar）格式存储和处理，然后利用SIMD指令集对数据进行批量处理")]),_._v("。主要好处有：\n"),v("ul",[v("li",[_._v("列式存储格式有助于提高数据局部性，从而利用CPU缓存；")]),_._v(" "),v("li",[_._v("有利于数据压缩，进一步减小数据处理的开销。")])])])]),_._v(" "),v("h3",{attrs:{id:"_1-13-存储层-列式存储"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-13-存储层-列式存储"}},[_._v("#")]),_._v(" 1.13 存储层：列式存储")]),_._v(" "),v("p",[_._v("现代OLAP系统基本都采取了列式存储引擎，传统的行式存储相比，列式存储可以更快的执行数据分析查询，应为它能够高效的压缩数据，可以只读取需要的列。")]),_._v(" "),v("table",[v("thead",[v("tr",[v("th",[_._v("Row-Store")]),_._v(" "),v("th",[_._v("Column-Store")])])]),_._v(" "),v("tbody",[v("tr",[v("td",[_._v("因为按照一行一行的写和读取数据，因此读取数据时往往需要读取那些不必要的列")]),_._v(" "),v("td",[_._v("可以只读取必要的列")])]),_._v(" "),v("tr",[v("td",[_._v("易于按记录读写数据")]),_._v(" "),v("td",[_._v("对一个一个记录的数据写入和读取都比较慢")])]),_._v(" "),v("tr",[v("td",[_._v("适合OLTP系统")]),_._v(" "),v("td",[_._v("适合OLAP系统")])]),_._v(" "),v("tr",[v("td",[_._v("不利于大数据集的聚合统计操作")]),_._v(" "),v("td",[_._v("利于大数据集的聚合统计")])]),_._v(" "),v("tr",[v("td",[_._v("不利于压缩")]),_._v(" "),v("td",[_._v("利于压缩")])])])]),_._v(" "),v("p",[_._v("与其他OLAP不同，Apache Doris在原本的列式存储上引入了新的列式存储结构，高并发查询场景可以实现更高的查询表现和并发支持。")]),_._v(" "),v("p",[_._v("行存在存储引擎中会作为一个隐藏列（DORIS_ROW_STOR_COL）来进行存储，在Memtable Flush时，将各个列按照JSONB进行编码并缓存这个隐藏列中，在数据读取时，通过该隐藏列的ColumnID来定位到该列，通过其行号定位到某一具体行，并反序列化个列。")]),_._v(" "),v("h3",{attrs:{id:"_1-14-存储层-存储文件结构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-14-存储层-存储文件结构"}},[_._v("#")]),_._v(" 1.14 存储层：存储文件结构")]),_._v(" "),v("p",[_._v("现代的OLAP往往都会采用行列混存的方案，采用Data Block + Header/Footer的文件结构。")]),_._v(" "),v("p",[_._v("以Apache Doris为例：")]),_._v(" "),v("ul",[v("li",[_._v("存储文件命名为Segment；")]),_._v(" "),v("li",[_._v("整体文件分为 Data Region、Index Region和Footer三个区域；")]),_._v(" "),v("li",[_._v("Data Region又分为Column、Page三层级，用于存储各列的数据信息；")]),_._v(" "),v("li",[_._v("各列的Index数据统一存储在Index Region；")]),_._v(" "),v("li",[_._v("Footer存储了的整体结构信息。")])]),_._v(" "),v("center",[v("table",{staticStyle:{"text-align":"center"}},[v("tr",[v("td",{attrs:{rowspan:"10"}},[_._v("Data Region")]),_._v(" "),v("td",{attrs:{rowspan:"3"}},[_._v("Column a")]),_._v(" "),v("td",[_._v("Page0: Data Page")])]),_._v(" "),v("tr",[v("td",[_._v("...")])]),_._v(" "),v("tr",[v("td",[_._v("PageN: Data Page")])]),_._v(" "),v("tr",[v("td",{attrs:{rowspan:"3"}},[_._v("Column b")]),_._v(" "),v("td",[_._v("Page0: Data Page")])]),_._v(" "),v("tr",[v("td",[_._v("...")])]),_._v(" "),v("tr",[v("td",[_._v("PageN: Data Page")])]),_._v(" "),v("tr",[v("td",{attrs:{colspan:"2"}},[_._v("...")])]),_._v(" "),v("tr",[v("td",{attrs:{rowspan:"3"}},[_._v("Column n")]),_._v(" "),v("td",[_._v("Page0: Data Page")])]),_._v(" "),v("tr",[v("td",[_._v("...")])]),_._v(" "),v("tr",[v("td",[_._v("PageN: Data Page")])]),_._v(" "),v("tr",[v("td",{attrs:{rowspan:"5"}},[_._v("Index Region")]),_._v(" "),v("td",{attrs:{rowspan:"3"}},[_._v("Column a Index")]),_._v(" "),v("td",[_._v("Bloom Filter Pages")])]),_._v(" "),v("tr",[v("td",[_._v("Bitmap Pages")])]),_._v(" "),v("tr",[v("td",[_._v("Ordinal Index Pages")])]),_._v(" "),v("tr",[v("td",{attrs:{colspan:"2"}},[_._v("...")])]),_._v(" "),v("tr",[v("td",{attrs:{colspan:"2"}},[_._v("Sort Key Index")])]),_._v(" "),v("tr",[v("td",{attrs:{rowspan:"3"}},[_._v("Index Region")]),_._v(" "),v("td",{attrs:{colspan:"2"}},[_._v("FileFooterPB")])]),_._v(" "),v("tr",[v("td",[_._v("PB Checksum")]),_._v(" "),v("td",[_._v("PB Length")])]),_._v(" "),v("tr",[v("td",{attrs:{colspan:"2"}},[_._v("MAGIC CODE")])])])]),_._v(" "),v("h3",{attrs:{id:"_1-15-存储层-索引结构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-15-存储层-索引结构"}},[_._v("#")]),_._v(" 1.15 存储层：索引结构")]),_._v(" "),v("h4",{attrs:{id:"_1-15-1-doris"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-15-1-doris"}},[_._v("#")]),_._v(" 1.15.1 Doris")]),_._v(" "),v("p",[_._v("目前Doris主要支持两类索引：")]),_._v(" "),v("ul",[v("li",[_._v("内建的智能索引，包括前缀索引和ZoneMap索引；")]),_._v(" "),v("li",[_._v("用户创建的二级索引，包括BloomFilter、Bitmap和Inverted倒排索引。")])]),_._v(" "),v("table",[v("thead",[v("tr",[v("th",[_._v("索引类别")]),_._v(" "),v("th",[_._v("索引方式")])])]),_._v(" "),v("tbody",[v("tr",[v("td",[_._v("前缀稀疏索引（Sorted Index）")]),_._v(" "),v("td",[_._v("建立在排序结构上的的一种索引")])]),_._v(" "),v("tr",[v("td",[_._v("ZoneMap索引")]),_._v(" "),v("td",[_._v("建立在Segment和Page级别的一种索引")])]),_._v(" "),v("tr",[v("td",[_._v("Bloom Filter")]),_._v(" "),v("td",[_._v("本质上一种位图结构，用于快速的判断一个给定的值是否在一个集合中")])]),_._v(" "),v("tr",[v("td",[_._v("Bitmap索引")]),_._v(" "),v("td",[_._v("使用bit数组（bitmap、bitset、bit string、bit vector）来存储和计算才做")])]),_._v(" "),v("tr",[v("td",[_._v("倒排索引")]),_._v(" "),v("td",[_._v("用于快速查找文档中包含特定单词或短语的数据结构")])])])]),_._v(" "),v("h4",{attrs:{id:"_1-15-2-clickhouse"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-15-2-clickhouse"}},[_._v("#")]),_._v(" 1.15.2 ClickHouse")]),_._v(" "),v("table",[v("thead",[v("tr",[v("th",[_._v("索引类别")]),_._v(" "),v("th",[_._v("索引方式")])])]),_._v(" "),v("tbody",[v("tr",[v("td",[_._v("主键索引")]),_._v(" "),v("td",[_._v("在创建表时，可以指定主键。主键索引用于在数据部分中快速找到满足Where子句的行。主键应该在数据的行在物理上的排序顺序有意义，因为ClickHouse值在连续的主键值范围内搜索。")])]),_._v(" "),v("tr",[v("td",[_._v("分区键")]),_._v(" "),v("td",[_._v("分区键用于将数据分割成不同的分区，每个分区存在文件系统的单独目录下。分区键允许快速删除数据和提升查询效率，过滤不必要扫描的分区。")])]),_._v(" "),v("tr",[v("td",[_._v("辅助索引（辅助键）")]),_._v(" "),v("td",[_._v("ClickHouse还支持创建辅助索引，也被称为跳过索引。这些索引提供了一种在数据块级别快速过滤的机制。如果查询的谓词与索引表达式匹配，那么ClickHouse可以跳过不满足条件的数据块，从而加速查询速度。")])]),_._v(" "),v("tr",[v("td",[_._v("Bitmap索引")]),_._v(" "),v("td",[_._v("对于某些数据类型，如低基数枚举值，ClickHouse支持使用Bitmap索引。Bitmap索引可以提供极高的压缩比，并且可以高效地处理一些特定类型的查询，如计算唯一值（Count distinct）或者集合的交并集操作。")])]),_._v(" "),v("tr",[v("td",[_._v("全文索引")]),_._v(" "),v("td",[_._v("对于文本数据，ClickHouse提高了全文搜索索引，如token分割索引和n-gram索引")])])])]),_._v(" "),v("h3",{attrs:{id:"_1-16-数据写入"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-16-数据写入"}},[_._v("#")]),_._v(" 1.16  数据写入")]),_._v(" "),v("h4",{attrs:{id:"_1-16-1-写入类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-16-1-写入类型"}},[_._v("#")]),_._v(" 1.16.1 写入类型")]),_._v(" "),v("table",[v("thead",[v("tr",[v("th"),_._v(" "),v("th",[_._v("MOR(Merge-on-Read)")]),_._v(" "),v("th",[_._v("MOW(Merge-on-Write)")]),_._v(" "),v("th",[_._v("Delta Store")])])]),_._v(" "),v("tbody",[v("tr",[v("td",[_._v("特点")]),_._v(" "),v("td",[_._v("读时合并")]),_._v(" "),v("td",[_._v("写时合并")]),_._v(" "),v("td",[_._v("增量存储")])]),_._v(" "),v("tr",[v("td",[_._v("技术原理")]),_._v(" "),v("td",[_._v("数据的新写入和修改都被存储在一个单独的增量存储区中，而不是直接更新到主存储区中。当需要查询数据时，系统会在读取过程中动态的将主存储区和增量存储区中的数据进行合并，在某个时间点，系统可能触发一个后台合并任务，将增量存储区的数据合并到主存储区，从而提高后续查询的性能。")]),_._v(" "),v("td",[_._v("数据的新写入和修改会立即更新到主存储区。为了提高写入性能，系统可以将新数据和修改数据先写入到增量存储区，然后出发一个后台合并过程，将增量存储的数据和主存储区的数据进行合并，与MOR不同，MOW在写入过程中完成高数据合并，因此在读取时不需进行合并动作。")]),_._v(" "),v("td",[_._v("将数据更新和修改存储在单独的增量存储区的方法，与MOR和MOW不同，DeltaStore并不设计合并过程，在查询过程中，系统需要同时访问主存储区和增量存储区，以获取完整的数据。")])]),_._v(" "),v("tr",[v("td",[_._v("优点")]),_._v(" "),v("td",[_._v("写入性能高：由于新数据和修改直接写入增量存储区，不需要立即更新主存储区，因此写入性能较高。")]),_._v(" "),v("td",[_._v("读取性能高：由于在数据写入过程中已经完成合并，查询操作不需要额外的动态合并过程，因此读取性能高。")]),_._v(" "),v("td",[_._v("写入性能高")])]),_._v(" "),v("tr",[v("td",[_._v("缺点")]),_._v(" "),v("td",[_._v("读取性能受影响：在读取过程中需要进行动态合并数据，可能会降低查询性能。")]),_._v(" "),v("td",[_._v("写入性能受影响：由于需要在写入过程中进行数据合并，对CPU磁盘等资源开销较大。")]),_._v(" "),v("td",[_._v("一个主键的数据会存在多个地方，难以保证索引的准确性，可能出现数据一致性问题。")])]),_._v(" "),v("tr",[v("td",[_._v("典型组件")]),_._v(" "),v("td",[_._v("Apache Doris、Iceberg")]),_._v(" "),v("td",[_._v("Apache Doris、SelectDB")]),_._v(" "),v("td",[_._v("Apache Kudu")])])])]),_._v(" "),v("h4",{attrs:{id:"_1-16-2-写入优化"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-16-2-写入优化"}},[_._v("#")]),_._v(" 1.16.2 写入优化")]),_._v(" "),v("table",[v("thead",[v("tr",[v("th",[_._v("写入方法")]),_._v(" "),v("th",[_._v("详情")])])]),_._v(" "),v("tbody",[v("tr",[v("td",[_._v("使用高效的列式存储格式")]),_._v(" "),v("td",[_._v("ORC和Parquet时成熟度较高的高效列存储格式，OLAP引擎将其集成在内部，调用对应的接口进行数据的写入和组织。")])]),_._v(" "),v("tr",[v("td",[_._v("支持写入时排序")]),_._v(" "),v("td",[_._v("创建表示指定排序字段，OLAP引擎在数据写入的时候对指定列调用排序函数。")])]),_._v(" "),v("tr",[v("td",[_._v("支持并行分区写入")]),_._v(" "),v("td",[_._v("创建表示指定分区列，OLAP引擎并发写入多个分区数据，加快数据写入速度。")])]),_._v(" "),v("tr",[v("td",[_._v("支持写入生成BloomFilter索引")]),_._v(" "),v("td",[_._v("创建表示🈯️定BloomFilter列，OLAP调用ORC/Parquet的BF函数，在写入的时候自动在头文件中索引区域加入相关BF项。")])])])]),_._v(" "),v("h4",{attrs:{id:"_1-16-3-事务隔离技术"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-16-3-事务隔离技术"}},[_._v("#")]),_._v(" 1.16.3 事务隔离技术")]),_._v(" "),v("table",[v("thead",[v("tr",[v("th",[_._v("事务隔离技术")]),_._v(" "),v("th",[_._v("特点")])])]),_._v(" "),v("tbody",[v("tr",[v("td",[_._v("使用Serializable isolation事务隔离级别")]),_._v(" "),v("td",[_._v("保证数据的安全可靠。")])]),_._v(" "),v("tr",[v("td",[_._v("读取数据时不加锁")]),_._v(" "),v("td",[_._v("提高并发，减少冲突，增加可靠性。")])]),_._v(" "),v("tr",[v("td",[_._v("使用乐观锁和重试机制保证并发写入的数据一致性")]),_._v(" "),v("td",[_._v("提高并发，减少冲突，增加可靠性。")])]),_._v(" "),v("tr",[v("td",[_._v("记录历史版本，可以回滚到指定版本的数据")]),_._v(" "),v("td",[_._v("实现时间旅行，可以查看追溯历史特定时间点或者区间的数据。")])]),_._v(" "),v("tr",[v("td",[_._v("通过支持原子修改保证了追加写入和文件合并的安全性")]),_._v(" "),v("td",[_._v("原子操作，可以有效隔离和消除并发对同一个文件/block/page操作带来的数据破坏，进而提高数据可靠性。")])])])]),_._v(" "),v("h2",{attrs:{id:"_2、典型应用场景"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2、典型应用场景"}},[_._v("#")]),_._v(" 2、典型应用场景")]),_._v(" "),v("h3",{attrs:{id:"_2-1-olap使用场景"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-olap使用场景"}},[_._v("#")]),_._v(" 2.1 OLAP使用场景")]),_._v(" "),v("p",[v("strong",[_._v("OLAP在工作中主要的使用场景有流量分析、用户画像、经营报表、用户标签、人群圈选、链路跟踪、行为分析、算法实验、搜索统计等")])]),_._v(" "),v("table",[v("thead",[v("tr",[v("th",[_._v("功能场景")]),_._v(" "),v("th",[_._v("特点")]),_._v(" "),v("th",[_._v("示例")]),_._v(" "),v("th",[_._v("查询实效性")])])]),_._v(" "),v("tbody",[v("tr",[v("td",[_._v("报表")]),_._v(" "),v("td",[_._v("查询维度固定"),v("br"),_._v("用户量大"),v("br"),_._v("存储量大")]),_._v(" "),v("td",[_._v("大屏"),v("br"),_._v("运营报表"),v("br"),_._v("智能报表")]),_._v(" "),v("td",[_._v("秒级")])]),_._v(" "),v("tr",[v("td",[_._v("多维分析")]),_._v(" "),v("td",[_._v("数据量大"),v("br"),_._v("计算量大"),v("br"),_._v("CPU峰值高")]),_._v(" "),v("td",[_._v("流量分析"),v("br"),_._v("AB实验"),v("br"),_._v("用户画像")]),_._v(" "),v("td",[_._v("秒级-分钟级")])]),_._v(" "),v("tr",[v("td",[_._v("即席查询")]),_._v(" "),v("td",[_._v("任意查询维度"),v("br"),_._v("多表关联")]),_._v(" "),v("td",[_._v("归因分析"),v("br"),_._v("数据洞察"),v("br"),_._v("数据分析师")]),_._v(" "),v("td",[_._v("秒级-分钟级")])]),_._v(" "),v("tr",[v("td",[_._v("搜索")]),_._v(" "),v("td",[_._v("非结构化数据"),v("br"),_._v("文本分析")]),_._v(" "),v("td",[_._v("日志分析"),v("br"),_._v("舆情分析")]),_._v(" "),v("td",[_._v("分钟级")])])])]),_._v(" "),v("h3",{attrs:{id:"_2-2-电商场景"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-电商场景"}},[_._v("#")]),_._v(" 2.2 电商场景")]),_._v(" "),v("h4",{attrs:{id:"_2-2-1-电商场景的特点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-电商场景的特点"}},[_._v("#")]),_._v(" 2.2.1 电商场景的特点")]),_._v(" "),v("p",[_._v("主要有两种特点：")]),_._v(" "),v("ul",[v("li",[_._v("数据实时更新：众多的维度数据，包括但不限于交易数据、金额数据等，都需要实时更新；")]),_._v(" "),v("li",[_._v("业务模型复杂：需要关联多张维度表，并且模型复杂。")])]),_._v(" "),v("h4",{attrs:{id:"_2-2-2-优化方向"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-优化方向"}},[_._v("#")]),_._v(" 2.2.2 优化方向")]),_._v(" "),v("h5",{attrs:{id:"_2-2-2-1-选择合适的join算法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-1-选择合适的join算法"}},[_._v("#")]),_._v(" 2.2.2.1 选择合适的Join算法")]),_._v(" "),v("table",[v("thead",[v("tr",[v("th"),_._v(" "),v("th",[_._v("Colocate Join")]),_._v(" "),v("th",[_._v("Bucket Join")]),_._v(" "),v("th",[_._v("Broadcast Join")]),_._v(" "),v("th",[_._v("Shuffle Join")])])]),_._v(" "),v("tbody",[v("tr",[v("td",[_._v("特点")]),_._v(" "),v("td",[_._v("每个节点在本地Join")]),_._v(" "),v("td",[_._v("分桶Join")]),_._v(" "),v("td",[_._v("小表广播到大表节点Join")]),_._v(" "),v("td",[_._v("科举Join key分发到各个节点，然后在各个节点Join")])])])]),_._v(" "),v("h5",{attrs:{id:"_2-2-2-2-选择合适的主键-索引"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-2-选择合适的主键-索引"}},[_._v("#")]),_._v(" 2.2.2.2 选择合适的主键/索引")]),_._v(" "),v("ul",[v("li",[_._v("每次查询都会使用的键作为主键")]),_._v(" "),v("li",[_._v("查询筛选维度添加索引")])]),_._v(" "),v("h5",{attrs:{id:"_2-2-2-3-选择更高效的存储介质"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-3-选择更高效的存储介质"}},[_._v("#")]),_._v(" 2.2.2.3 选择更高效的存储介质")]),_._v(" "),v("table",[v("thead",[v("tr",[v("th",[_._v("特征")]),_._v(" "),v("th",[_._v("SSD")]),_._v(" "),v("th",[_._v("NVMe")])])]),_._v(" "),v("tbody",[v("tr",[v("td",[_._v("读写速度")]),_._v(" "),v("td",[_._v("大约500Mb/s")]),_._v(" "),v("td",[_._v("大约3500Mb/s")])]),_._v(" "),v("tr",[v("td",[_._v("IOPS")]),_._v(" "),v("td",[_._v("100,000 IOPS")]),_._v(" "),v("td",[_._v("500,000 IOPS")])])])]),_._v(" "),v("h3",{attrs:{id:"_2-3-行为分析场景"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-行为分析场景"}},[_._v("#")]),_._v(" 2.3 行为分析场景")]),_._v(" "),v("center",[v("img",{attrs:{src:"/donot-eat-fish/img/data_analysis/olap/00_olap_use_behavior_ansis_sence.png",width:"80%"}})]),_._v(" "),v("h2",{attrs:{id:"_3、前沿技术方向"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3、前沿技术方向"}},[_._v("#")]),_._v(" 3、前沿技术方向")]),_._v(" "),v("h3",{attrs:{id:"_3-1-联邦查询"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-联邦查询"}},[_._v("#")]),_._v(" 3.1 联邦查询")]),_._v(" "),v("h3",{attrs:{id:"_3-2-olap-湖仓"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-olap-湖仓"}},[_._v("#")]),_._v(" 3.2 OLAP+湖仓")]),_._v(" "),v("h3",{attrs:{id:"_3-3-混合存储-引擎路由"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-混合存储-引擎路由"}},[_._v("#")]),_._v(" 3.3 混合存储+引擎路由")]),_._v(" "),v("h3",{attrs:{id:"_3-4-容器化"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-容器化"}},[_._v("#")]),_._v(" 3.4 容器化")]),_._v(" "),v("h3",{attrs:{id:"_3-5-云原生"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-云原生"}},[_._v("#")]),_._v(" 3.5 云原生")]),_._v(" "),v("h2",{attrs:{id:"参考资料"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[_._v("#")]),_._v(" 参考资料")]),_._v(" "),v("p",[_._v("[各类数据库整体架构图汇总]"),v("a",{attrs:{href:"https://www.gbase8.cn/6132",target:"_blank",rel:"noopener noreferrer"}},[_._v("https://www.gbase8.cn/6132"),v("OutboundLink")],1)]),_._v(" "),v("p",[_._v("[OLAP知识地图专业版-DataFun]")])],1)}),[],!1,null,null,null);v.default=r.exports}}]);
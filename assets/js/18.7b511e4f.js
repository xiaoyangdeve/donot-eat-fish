(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{335:function(s,t,a){"use strict";a.r(t);var n=a(1),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"_1、背景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、背景"}},[s._v("#")]),s._v(" 1、背景")]),s._v(" "),t("p",[s._v("在Trino中有三种非常核心的数据结构："),t("code",[s._v("Slice")]),s._v("、"),t("code",[s._v("Block")]),s._v("、"),t("code",[s._v("Page")]),s._v("。在很多计算和Function中都是对这三种数据结构的操作。")]),s._v(" "),t("h2",{attrs:{id:"_2、slice"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、slice"}},[s._v("#")]),s._v(" 2、Slice")]),s._v(" "),t("p",[s._v("从使用者的角度来看，Slice 是一个对开发者更友好的虚拟内存，通常是一块连续的内存区域，它定义了一组 getter 和 setter，所以你可以像使用一块结构化数据一样使用内存：")]),s._v(" "),t("center",[t("img",{attrs:{src:"/donot-eat-fish/img/bigdata/trino/trino_slice01.png",width:"80%"}})]),s._v(" "),t("p",[s._v("Slice最典型用法就是用来表示一个字符串：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Slice")]),s._v(" slice "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Slices")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("utf8Slice")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello world"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Slice")]),s._v(" subSlice "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SliceUtf8")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("substring")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("slice"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("我们可以像使用String一样的使用Slice，在Trino中使用Slice而不是String的原因是：")]),s._v(" "),t("ul",[t("li",[s._v("字符串的构建成本很高，比如字符串连接、StringBuilder等；")]),s._v(" "),t("li",[s._v("Slice是可变的，而字符串不是，我们需要对字符串进行计算时效率更高；")]),s._v(" "),t("li",[s._v("字符串在内存中编码是UTF16，Slice是UTF8，内存效率更高，UTF16最少用两个字节表示一个字符，而UTF8最少用一个字节，所以如果String内容主要是ascii字符，UTF8可以节省很多内存。")])]),s._v(" "),t("p",[s._v("在Trino中另一个用法就是用Slice表示原始字节（VarBinary）：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// use it as raw bytes")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 我们可以从Block中获取原始Slice")]),s._v("\nblock"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getSlice")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getBytes")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h2",{attrs:{id:"_3、block"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、block"}},[s._v("#")]),s._v(" 3、Block")]),s._v(" "),t("p",[s._v("Block 可以被认为是一组相同类型（int、long、Slice 等）的数据。 每个数据项占据一个位置，总位置数代表Block持有数据的总行数（Block只持有这些行中的一列）。")]),s._v(" "),t("center",[t("img",{attrs:{src:"/donot-eat-fish/img/bigdata/trino/trino_block01.png",width:"80%"}})]),s._v(" "),t("p",[s._v("Block定义了一系列的API，如getXXX等。同时还定了copyPositions方法，它不是从 Block 中获取一个值，而是获取由位置列表指定的值列表作为新 Block 。")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n  * Returns a block containing the specified positions.\n  * Positions to copy are stored in a subarray within {@code positions} array\n  * that starts at {@code offset} and has length of {@code length}.\n  * All specified positions must be valid for this block.\n  * <p>\n  * The returned block must be a compact representation of the original block.\n  */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Block")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("copyPositions")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" positions"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" offset"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("p",[s._v("同时Trino中定义了BlockEncoding，决定了Block如何序列化和反序列化。")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BlockEncoding")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n     * Gets the unique name of this encoding.\n     */")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n     * Read a block from the specified input.  The returned\n     * block should begin at the specified position.\n     */")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Block")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("readBlock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BlockEncodingSerde")]),s._v(" blockEncodingSerde"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SliceInput")]),s._v(" input"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n     * Write the specified block to the specified output\n     */")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("writeBlock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BlockEncodingSerde")]),s._v(" blockEncodingSerde"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SliceOutput")]),s._v(" sliceOutput"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Block")]),s._v(" block"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n     * This method allows the implementor to specify a replacement object that will be serialized instead of the original one.\n     */")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("default")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Optional")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Block")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("replacementBlockForWrite")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Block")]),s._v(" block"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Optional")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("empty")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br")])]),t("p",[s._v("Block基本实现类是指内部包含直接真实数据，不是以嵌套其他Block对象的形式出现的数据类型。其内部的数据以基本类型数组或者Slice对象出现。")]),s._v(" "),t("p",[s._v("Block的基本实现类有"),t("code",[s._v("IntArrayBlock")]),s._v(", "),t("code",[s._v("ShortArrayBlock")]),s._v(", "),t("code",[s._v("ByteArrayBlock")]),s._v(", "),t("code",[s._v("LongArrayBlock")]),s._v(", "),t("code",[s._v("Int96ArrayBlock")]),s._v(", "),t("code",[s._v("Int128ArrayBlock")]),s._v(", "),t("code",[s._v("VariableWidthBlock")]),s._v(" 。")]),s._v(" "),t("h3",{attrs:{id:"_3-1-intarrayblock、shortarrayblock、bytearrayblock、longarrayblock"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-intarrayblock、shortarrayblock、bytearrayblock、longarrayblock"}},[s._v("#")]),s._v(" 3.1 IntArrayBlock、ShortArrayBlock、ByteArrayBlock、LongArrayBlock")]),s._v(" "),t("p",[s._v("比如IntArrayBlock，内部以整型数组存放该Block的真实底层数据。具体的内存形式如下图：")]),s._v(" "),t("center",[t("img",{attrs:{src:"/donot-eat-fish/img/bigdata/trino/trino_block_int01.jpg",width:"80%"}})]),s._v(" "),t("p",[t("strong",[t("code",[s._v("IntArrayBlock")]),s._v(" 的底层数据其实就是"),t("code",[s._v("int[] values")]),s._v(" 和"),t("code",[s._v("boolean[] valueIsNull")]),s._v(" 这两个数组")]),s._v("，这里"),t("code",[s._v("boolean[] valueIsNull")]),s._v("的出现是为了表示某个位置上的值是否为null，毕竟values 是一个基本类型数组，而不是包装类型"),t("code",[s._v("Integer")]),s._v("数组，所以还是需要有个额外的布尔类型数组表示某个位置是否是null。")]),s._v(" "),t("p",[s._v("这里要注意，"),t("code",[s._v("values")]),s._v(" 数组和 "),t("code",[s._v("valueIsNull")]),s._v(" 数组的长度不一定相同，因为"),t("code",[s._v("IntArrayBlock")]),s._v("只会使用其中的一部分数据，即索引为 "),t("code",[s._v("[arrayOffset, arrayOffset+positionCount)")]),s._v("的区域。所以这个Block在计算其底层数据大小（sizeInByte）的时候，只会统计自己使用的那一部分。")]),s._v(" "),t("p",[s._v("在计算整个类型占用的字节大小（retainedSizeInByte）时，会计算"),t("code",[s._v("values")]),s._v(" 和"),t("code",[s._v("valueIsNull")]),s._v("占用的全部内存，然后再加上这个类自身使用的内存大小（这里要注意，"),t("strong",[s._v("数组是引用类型，在类中只保存了一个引用标记，所以需要额外计算")]),s._v("）。")]),s._v(" "),t("h3",{attrs:{id:"_3-2-int96arrayblock和int128arrayblock"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-int96arrayblock和int128arrayblock"}},[s._v("#")]),s._v(" 3.2 Int96ArrayBlock和Int128ArrayBlock")]),s._v(" "),t("p",[s._v("在java中的整型是Long最长是64个字节，那么如何表示更长字节的整型呢？")]),s._v(" "),t("center",[t("img",{attrs:{src:"/donot-eat-fish/img/bigdata/trino/trino_block_int02.jpg",width:"80%"}})]),s._v(" "),t("p",[s._v("Trino使用了long+int来表示一个96位的整型。同样，这里的"),t("code",[s._v("high")]),s._v("数组 和 "),t("code",[s._v("low")]),s._v("数组 的长度也没有必要相同，Block对象只会使用其一部分。")]),s._v(" "),t("p",[s._v("由于没有基本类型可以表示96位的整型，所以从"),t("code",[s._v("Int96ArrayBlock")]),s._v("获取数据需要调用"),t("code",[s._v("getLong()")]),s._v("和"),t("code",[s._v("getInt()")]),s._v(" 两个方法，才能将一个完整的数据取出。并且由于"),t("code",[s._v("high")]),s._v(" 和 "),t("code",[s._v("low")]),s._v("表示的数据高低位不一样，所以在获取数据时要有明确的offset。只能这么调用：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" high "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getLong")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("position"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" low "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getInt")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("position"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("既然long+int可以表示一个96位的整型，那么long+long可以表示一个128位的整型。")]),s._v(" "),t("center",[t("img",{attrs:{src:"/donot-eat-fish/img/bigdata/trino/trino_block_int03.jpg",width:"80%"}})]),s._v(" "),t("p",[s._v("这里"),t("code",[s._v("values")]),s._v("数组中的两个元素表示Block底层数据的一个元素，对应一个"),t("code",[s._v("valueIsNull")]),s._v("的值。")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" high "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getLong")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("position"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" low "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getLong")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("position"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h3",{attrs:{id:"_3-3-variablewidthblock"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-variablewidthblock"}},[s._v("#")]),s._v(" 3.3 VariableWidthBlock")]),s._v(" "),t("p",[t("code",[s._v("VariableWidthBlock")]),s._v("使用的底层数据是Slice类型，Slice是Facebook在另一个代码库中定义的数据类型，不仅仅在Trino中使用。")]),s._v(" "),t("p",[s._v("Slice类型是一个内存切片，Slice底层是一段连续的内存空间， 有点像python中列表的切片。Trino使用Slice来高效地操作内存。Slice中可以存储各类基本数据，不过主要使用场景是用来存储字符串。")]),s._v(" "),t("center",[t("img",{attrs:{src:"/donot-eat-fish/img/bigdata/trino/trino_block_variableWidth01.jpg",width:"80%"}})]),s._v(" "),t("p",[t("code",[s._v("VariableWidthBlock")]),s._v(" 实际上是一段内存切片，然后通过offsets数组，分位postionCount个小的内存切片。与前面一样，"),t("code",[s._v("offsets")]),s._v("数组 和 "),t("code",[s._v("valueIsNull")]),s._v("数组 的长度也是可以不等的，"),t("code",[s._v("VariableWidthBlock")]),s._v(" 只会使用其一部分。")]),s._v(" "),t("p",[s._v("由于"),t("code",[s._v("VariableWidthBlock")]),s._v("的内部元素（即一小段Slice）的字节长度不定，所以offsets的实际可用元素要比positionCount多一个，用于确定最后一个元素的末尾偏移量。 后面的嵌套类型也是如此，元素的字节长度不定，offsets的可用长度必须比positionCount多一个。")]),s._v(" "),t("h3",{attrs:{id:"_3-4-arrayblock"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-arrayblock"}},[s._v("#")]),s._v(" 3.4 ArrayBlock")]),s._v(" "),t("p",[s._v("ArrayBlock是一个嵌套的Block类型，"),t("strong",[s._v("Block嵌套类型，就是该Block的内部数值是存储在另一个或多个的Block里")]),s._v("。可以说是对Block基本实现类的无限次封装，以实现不同的功能。")]),s._v(" "),t("p",[t("code",[s._v("ArrayBlock")]),s._v(" 表示的是一个Block数组，其内部结构如图：")]),s._v(" "),t("center",[t("img",{attrs:{src:"/donot-eat-fish/img/bigdata/trino/trino_array_block01.jpg",width:"80%"}})]),s._v(" "),t("p",[t("code",[s._v("ArrayBlock")]),s._v("将一个完整的内嵌Block通过offsets数组分隔成一个个小的Block块，可以当成一个"),t("code",[s._v("Block[]")]),s._v(" 。")]),s._v(" "),t("p",[s._v("这里要注意retainedSizeInByte的计算方式，由于采用了Block嵌套结构，其内部保存的retainedSizeInByte不再包含其内嵌Block占用的内存大小，需要调用getRetainedSizeInBytes()方法，然后该方法会调用其内嵌Block的getRetainedSizeInBytes()，直到最终的计算完成。")]),s._v(" "),t("h3",{attrs:{id:"_3-5-mapblock"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-mapblock"}},[s._v("#")]),s._v(" 3.5 MapBlock")]),s._v(" "),t("p",[t("code",[s._v("MapBlock")]),s._v(" 表示的是一个 { Block -> Block } 的映射结构，其内部结构如下：")]),s._v(" "),t("center",[t("img",{attrs:{src:"/donot-eat-fish/img/bigdata/trino/trino_map_block01.jpg",width:"80%"}})]),s._v(" "),t("p",[t("code",[s._v("MapBlock")]),s._v("将两个Block分别存储映射类型的 key 和 value，并且一一对应。那么，根据外部输入，如何找到对应的键值对呢？总不能每次都扫描一遍keyBlock吧？")]),s._v(" "),t("p",[s._v("这里就要提到"),t("code",[s._v("MapBlock")]),s._v(" 的一个包装类型了—— "),t("code",[s._v("SingleMapBlock")]),s._v("。")]),s._v(" "),t("h3",{attrs:{id:"_3-6-singlemapblock"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-singlemapblock"}},[s._v("#")]),s._v(" 3.6 SingleMapBlock")]),s._v(" "),t("p",[t("code",[s._v("SingleMapBlock")]),s._v(" 将 "),t("code",[s._v("MapBlock")]),s._v(" 的hashTables利用起来了。")]),s._v(" "),t("center",[t("img",{attrs:{src:"/donot-eat-fish/img/bigdata/trino/trino_single_map_block01.jpg",width:"80%"}})]),s._v(" "),t("p",[s._v("由于"),t("code",[s._v("SingleMapBlock")]),s._v("在内部面对的是整个"),t("code",[s._v("AbstractMapBlock(MapBlock的基类)")]),s._v("，而不是单独的 keyBlock 和 valueBlock , 所以positionCount是其嵌套的AbstractMapBlock的两倍。")]),s._v(" "),t("p",[t("code",[s._v("SingleMapBlock")]),s._v(" 利用hashTables找到该映射类型的键值对，具体步骤如下：")]),s._v(" "),t("center",[t("img",{attrs:{src:"/donot-eat-fish/img/bigdata/trino/trino_single_map_block02.jpg",width:"80%"}})]),s._v(" "),t("ol",[t("li",[t("code",[s._v("SingleMapBlock")]),s._v(" 会根据外部输入，从hashTable 中找到keyposition的位置")]),s._v(" "),t("li",[s._v("由于然后再指示出得到的键值对在SingleMapBlock中的位置——键的位置是 "),t("code",[s._v("2 * keyPosition")]),s._v("，值的位置是 "),t("code",[s._v("2 * keyPosition + 1")]),s._v(".")])]),s._v(" "),t("h3",{attrs:{id:"_3-7-rowblock"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-rowblock"}},[s._v("#")]),s._v(" 3.7 RowBlock")]),s._v(" "),t("p",[t("code",[s._v("RowBlock")]),s._v(" 将多个具有相同大小（即positionCount相同）的Block对象组合在一起。")]),s._v(" "),t("center",[t("img",{attrs:{src:"/donot-eat-fish/img/bigdata/trino/trino_row_block01.jpg",width:"80%"}})]),s._v(" "),t("h3",{attrs:{id:"_3-8-singlerowblock"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-8-singlerowblock"}},[s._v("#")]),s._v(" 3.8 SingleRowBlock")]),s._v(" "),t("p",[t("code",[s._v("SingleRowBlock")]),s._v(" 的结构与"),t("code",[s._v("RowBlock")]),s._v(" 结构类似，同样是内部嵌套了一个Block数组，但是不同的是，"),t("code",[s._v("SingleRowBlock")]),s._v("使用其内部嵌套数组各个元素的一个小单元。具体结构如下：")]),s._v(" "),t("center",[t("img",{attrs:{src:"/donot-eat-fish/img/bigdata/trino/trino_single_row_block01.jpg",width:"80%"}})]),s._v(" "),t("p",[t("code",[s._v("SingleRowBlock")]),s._v("内部存有一个整数——rowIndex，表示"),t("code",[s._v("SingleRowBlock")]),s._v("只使用其嵌套的fieldBlock数组中偏移量位rowIndex的一小段，而不是像其他Block类型那样有个offsets数组表示使用了嵌套Block的一长段。")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SingleRowBlock")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AbstractSingleRowBlock")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("INSTANCE_SIZE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassLayout")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("parseClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SingleRowBlock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("instanceSize")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Block")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" fieldBlocks"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" rowIndex"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SingleRowBlock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" rowIndex"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Block")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" fieldBlocks"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rowIndex "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" rowIndex"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("fieldBlocks "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" fieldBlocks"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("h3",{attrs:{id:"_3-9-dictionaryblock"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-9-dictionaryblock"}},[s._v("#")]),s._v(" 3.9 DictionaryBlock")]),s._v(" "),t("p",[t("code",[s._v("DictionaryBlock")]),s._v(" 是一个非常重要的Block类型。首先概览 "),t("code",[s._v("DistionaryBlock")]),s._v("的内存结构：")]),s._v(" "),t("center",[t("img",{attrs:{src:"/donot-eat-fish/img/bigdata/trino/trino_dictionary_block01.jpg",width:"80%"}})]),s._v(" "),t("p",[t("code",[s._v("DistionaryBlock")]),s._v(" 有两个非常重要的状态——sequential 和 compacted。")]),s._v(" "),t("p",[s._v("sequential 表示内嵌Block和ids数组指向的偏移量是依序的，如下图所示：")]),s._v(" "),t("center",[t("img",{attrs:{src:"/donot-eat-fish/img/bigdata/trino/trino_dictionary_block02.jpg",width:"80%"}})]),s._v(" "),t("p",[s._v("compacted表示ids的大小和内嵌Block的positionCount不一致，如下图所示：")]),s._v(" "),t("center",[t("img",{attrs:{src:"/donot-eat-fish/img/bigdata/trino/trino_dictionary_block03.jpg",width:"80%"}})]),s._v(" "),t("p",[s._v("有"),t("strong",[s._v("几条重要的规则")]),s._v("：")]),s._v(" "),t("ol",[t("li",[s._v("若当前的"),t("code",[s._v("DictionaryBlock")]),s._v("是compacted，那么其嵌套类型不能是"),t("code",[s._v("DictionaryBlock")]),s._v(";")]),s._v(" "),t("li",[s._v("若当前的"),t("code",[s._v("DictionaryBlock")]),s._v("是sequential，那么该Block必须是compacted的（同时也表明其嵌套类型不会是"),t("code",[s._v("DictionaryBlock")]),s._v("类型）；")]),s._v(" "),t("li",[s._v("若当前的"),t("code",[s._v("DictionaryBlock")]),s._v("是compacted，那么其sizeInBytes和uniqueIds都可以直接获取了，否则，需要调用calculateCompactedSize()方法才能计算。")])]),s._v(" "),t("h2",{attrs:{id:"_4、page"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、page"}},[s._v("#")]),s._v(" 4、Page")]),s._v(" "),t("p",[s._v("Page是由Block构成的：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Page")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("INSTANCE_SIZE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassLayout")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("parseClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Page")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("instanceSize")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Block")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("EMPTY_BLOCKS")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Block")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n     * Visible to give trusted classes like {@link PageBuilder} access to a constructor that doesn't\n     * defensively copy the blocks\n     */")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Page")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("wrapBlocksWithoutCopy")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" positionCount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Block")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" blocks"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Page")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" positionCount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" blocks"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Block")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" blocks"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" positionCount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("volatile")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" sizeInBytes "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("volatile")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" retainedSizeInBytes "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("volatile")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" logicalSizeInBytes "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br")])]),t("p",[s._v("除了blocks，Page还有一个概念叫做channel：每个Block都是Page的一个channel，block的总数就是channel的个数。 所以让我们总结一下这里的数据结构，当有一些行要发送时，Trino 将")]),s._v(" "),t("ol",[t("li",[s._v("将每一列放入一个单独的块中。")]),s._v(" "),t("li",[s._v("将这些块放入页面中。")]),s._v(" "),t("li",[s._v("发送页面")])]),s._v(" "),t("p",[s._v("页面是保存数据并在 Trino 物理执行操作符之间传输的数据结构：上游操作符通过 "),t("code",[s._v("getOutput()")]),s._v(" 产生输出：")]),s._v(" "),t("p",[s._v("下游算子通过 "),t("code",[s._v("addInput()")]),s._v("方法获取输入：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Operator")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AutoCloseable")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n     * Gets an output page from the operator.  If no output data is currently\n     * available, return null.\n     */")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Page")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getOutput")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n     * Adds an input page to the operator.  This method will only be called if\n     * {@code needsInput()} returns true.\n     */")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("addInput")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Page")]),s._v(" page"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("center",[t("img",{attrs:{src:"/donot-eat-fish/img/bigdata/trino/trino_page_operator01.jpg",width:"80%"}})]),s._v(" "),t("p",[s._v("和 Block 一样，Page 也需要序列化和反序列化，序列化发生在数据需要在 worker 之间传输时。 当Page被序列化时，它会先使用相应的BlockEncoding对Blocks进行编码，然后如果压缩器可用，它会尝试压缩编码后的块数据，如果压缩效果好（编码率低于：0.8），它将使用 压缩数据，否则使用解压缩数据。 编码后的块数据将与一些统计信息一起放入名为 SerializedPage 的类中：压缩前后页面的字节大小。")]),s._v(" "),t("p",[t("strong",[s._v("Page与RowBlock的区别：")])]),s._v(" "),t("center",[t("img",{attrs:{src:"/donot-eat-fish/img/bigdata/trino/trino_page_operator02.jpg",width:"80%"}})]),s._v(" "),t("ol",[t("li",[s._v("RowBlock内部嵌套Block数组固定，而Page内部嵌套Block数组是不固定的，可以通过appendColumn()方法和prependColumn()对其增加数据，并引入channel的概念，内部嵌套的一个Block对象就是一个channel，其索引编号是column；")]),s._v(" "),t("li",[s._v("RowBlock对其内部嵌套的Block数组只能进行整体操作，而Page可以将其内部Block取出，getBlock(int channel) 方法取出一个单独的Block，getColumns(int column)方法单独取出一个Block对象并生成一个单Block的Page；")])]),s._v(" "),t("p",[s._v("总的来说，RowBlock对其内部嵌套的Block数组的每一个元素都是一视同仁的，而Page对其内部嵌套的Block数组中的每个元素是区别对待的。")]),s._v(" "),t("p",[s._v("Page类型是Trino中获取数据的基本数据结构。"),t("strong",[s._v("在Trino中，获取数据有两种方式，一种是通过RecordCursor获取最终二维表的一条记录，另一种就是利用ConnectorPageSource的getNextPage()方法，获取一个Page的数据，一个Page表示的是二维表的多条记录。")])]),s._v(" "),t("h2",{attrs:{id:"参考"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[s._v("#")]),s._v(" 参考")]),s._v(" "),t("p",[s._v("https://zhuanlan.zhihu.com/p/60813087")]),s._v(" "),t("p",[s._v("https://zhuanlan.zhihu.com/p/443839491")])],1)}),[],!1,null,null,null);t.default=e.exports}}]);
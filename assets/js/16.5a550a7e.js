(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{333:function(s,t,a){"use strict";a.r(t);var n=a(1),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"_1、现状"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、现状"}},[s._v("#")]),s._v(" 1、现状")]),s._v(" "),t("p",[s._v("Trino作为一个计算引擎，除了支持一些常见的数字、字符串类型的数据，还支持一些别的系统里面比较少见的自定义的 "),t("code",[s._v("IpAddress")]),s._v(", "),t("code",[s._v("Geometry")]),s._v(" 等等高级类型。")]),s._v(" "),t("h2",{attrs:{id:"_2、基本类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、基本类型"}},[s._v("#")]),s._v(" 2、基本类型")]),s._v(" "),t("h3",{attrs:{id:"_2-1-整数类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-整数类型"}},[s._v("#")]),s._v(" 2.1 整数类型")]),s._v(" "),t("p",[t("code",[s._v("tinyint")]),s._v(", "),t("code",[s._v("smallint")]),s._v(", "),t("code",[s._v("integer")]),s._v(", "),t("code",[s._v("bigint")]),s._v(" 是几种整数类型，但是跟通常的数据库不一样的是，Trino里面的数据都是 signed 类型，下面是这些数据类型的一个基本信息:")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("类型")]),s._v(" "),t("th",[s._v("类型Size（Byte）")]),s._v(" "),t("th",[s._v("Max")]),s._v(" "),t("th",[s._v("Min")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[s._v("tinyint")]),s._v(" "),t("td",[s._v("1")]),s._v(" "),t("td",[s._v("127")]),s._v(" "),t("td",[s._v("-128")])]),s._v(" "),t("tr",[t("td",[s._v("smallint")]),s._v(" "),t("td",[s._v("2")]),s._v(" "),t("td",[s._v("32767")]),s._v(" "),t("td",[s._v("-32768")])]),s._v(" "),t("tr",[t("td",[s._v("int")]),s._v(" "),t("td",[s._v("4")]),s._v(" "),t("td",[s._v("2147483647")]),s._v(" "),t("td",[s._v("-2147483648")])]),s._v(" "),t("tr",[t("td",[s._v("bigint")]),s._v(" "),t("td",[s._v("8")]),s._v(" "),t("td",[s._v("9223372036854775807")]),s._v(" "),t("td",[s._v("-9223372036854775808")])])])]),s._v(" "),t("h3",{attrs:{id:"_2-2-布尔类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-布尔类型"}},[s._v("#")]),s._v(" 2.2 布尔类型")]),s._v(" "),t("p",[s._v("Boolean在底层是用 "),t("code",[s._v("Byte")]),s._v(" 来表示的， 1代表true, 0代表false。")]),s._v(" "),t("h3",{attrs:{id:"_2-3-浮点类型float"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-浮点类型float"}},[s._v("#")]),s._v(" 2.3 浮点类型Float")]),s._v(" "),t("p",[s._v("在一般的编程语言里面浮点数会有两种类型: "),t("code",[s._v("float")]),s._v(" 和 "),t("code",[s._v("double")]),s._v(" , 在Trino里面对应的是 "),t("code",[s._v("real")]),s._v(" 和 "),t("code",[s._v("double")]),s._v(", "),t("code",[s._v("real")]),s._v(" 其实就是 "),t("code",[s._v("float")]),s._v(", 只是用了一个更专业化的名字。")]),s._v(" "),t("p",[t("code",[s._v("real")]),s._v(" 在Trino里面是用一个int来表示的:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("package")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("io"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("trino"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("spi"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("type")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RealType")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AbstractIntType")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n\t\t"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getObjectValue")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConnectorSession")]),s._v(" session"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Block")]),s._v(" block"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" position"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("block"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("isNull")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("position"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\t\t\t\t\n       \t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// block.getInt")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("intBitsToFloat")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("block"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getInt")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("position"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("p",[s._v("需要获取实际的值的时候才会用 "),t("code",[s._v("Float.intBitsToFloat")]),s._v(" 来进行转换，为什么可以用一个int来表示一个float? 因为它们在内存表示的时候都是用的4个字节来表示的，占用的存储空间是一样的。")]),s._v(" "),t("p",[s._v("那为什么不直接用 "),t("code",[s._v("float")]),s._v(" 自己来表示呢? 看下代码我们会发现T"),t("strong",[s._v("rino的 "),t("code",[s._v("Block")]),s._v(" 类里面只有针对整数的方法, 没有浮点数对应的操作方法")]),s._v("：")]),s._v(" "),t("center",[t("img",{attrs:{src:"/donot-eat-fish/img/bigdata/trino/trino_type02.png",width:"80%"}})]),s._v(" "),t("p",[s._v("我们知道浮点数跟定点数不一样的是，"),t("strong",[s._v("它们无法精确无损的表达所有的数")]),s._v("。我们还在使用浮点数的原因在于，相对于定点数来说浮点数以相同的存储空间可以表示更大范围的数字，比如同样使用4个字节来表示，int类型能表示的最大的数字是 "),t("code",[s._v("(2 ^ 31 - 1)")]),s._v(" ，而Float能表示的最大的数字则是："),t("code",[s._v("(2 − 2 ^ −23) × (2 ^ 127)")]),s._v(" 这可大的太多了，在一些非金融领域使用float，double完全没问题，但是一旦涉及到金融领域，必须要用定点数了。")]),s._v(" "),t("h3",{attrs:{id:"_2-4-定点数decimal"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-定点数decimal"}},[s._v("#")]),s._v(" 2.4 定点数Decimal")]),s._v(" "),t("p",[s._v("Decimal跟普通浮点数不一样的是，它在声明的时候有两个关键参数: "),t("code",[s._v("precision")]),s._v(" 和 "),t("code",[s._v("scale")]),s._v(": "),t("code",[s._v("decimal(20，4)")]),s._v("。")]),s._v(" "),t("p",[s._v("Decimal在Trino中LongDecimalType是用 "),t("code",[s._v("BigInteger")]),s._v(" + (precision, scale) 信息来一起表示的:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// LongDecimalType")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getObjectValue")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConnectorSession")]),s._v(" session"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Block")]),s._v(" block"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" position"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("block"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("isNull")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("position"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Int128")]),s._v(" value "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Int128")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getObject")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("block"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" position"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BigInteger")]),s._v(" unscaledValue "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("toBigInteger")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SqlDecimal")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("unscaledValue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getPrecision")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getScale")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//SqlDecimal")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SqlDecimal")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BigInteger")]),s._v(" unscaledValue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" precision"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" scale"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SqlDecimal")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BigInteger")]),s._v(" unscaledValue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" precision"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" scale"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("unscaledValue "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" unscaledValue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("precision "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" precision"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("scale "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" scale"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br")])]),t("p",[s._v("Decimal在Trino里面又分为"),t("strong",[s._v("两种类型"),t("code",[s._v("ShortDecimalType")]),s._v(" 和 "),t("code",[s._v("LongDecimalType")])]),s._v(", Short的版本最大的Precision是 "),t("code",[s._v("18")]),s._v(", 而Long的版本最大的Precision是 "),t("code",[s._v("38")]),s._v(" 。分两种类型的主要目的是为了性能，Short版本的性能更好，而且我们通常也确实使用Short版本的就够了。")]),s._v(" "),t("h4",{attrs:{id:"_2-5-java中的decimal"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-java中的decimal"}},[s._v("#")]),s._v(" 2.5 Java中的Decimal")]),s._v(" "),t("p",[s._v("定点数由于完全准确的存储了数值，没有什么十进制与二进制之间的转换，因此可以完全精准的存储数据。")]),s._v(" "),t("p",[s._v("BigDecimal 为了优化性能和内存占用分了两种情况对数据进行存储:")]),s._v(" "),t("ul",[t("li",[s._v("不管是哪种情况，都通过 "),t("code",[s._v("precision")]),s._v(" 和 "),t("code",[s._v("scale")]),s._v(" 两个字段来保存精度信息")]),s._v(" "),t("li",[s._v("如果数据不大(比Long.MAX_VALUE)小，那么它会直接把数字保存在intCompact里面 (intCompact其实是一个long类型的字段)。")]),s._v(" "),t("li",[s._v("如果数据确实很大，超过了Long类型的范围, 它会使用BigInteger类型的 "),t("code",[s._v("intVal")]),s._v(" 来保 存scale过后的值。\n"),t("ul",[t("li",[s._v("而BigInteger里面则是通过一个int字段的 "),t("code",[s._v("signum")]),s._v(" 和 一个int数组: "),t("code",[s._v("mag")]),s._v(" 来表达。")])])])]),s._v(" "),t("p",[s._v("因此"),t("strong",[s._v("Decimal类型其实是通过空间的消耗来换取的精度的准确")]),s._v("。")]),s._v(" "),t("h4",{attrs:{id:"_2-6-字符串类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-字符串类型"}},[s._v("#")]),s._v(" 2.6 字符串类型")]),s._v(" "),t("p",[s._v("Trino里面支持4种字符串类型: "),t("code",[s._v("varchar")]),s._v(", "),t("code",[s._v("char")]),s._v(", "),t("code",[s._v("varbinary")]),s._v(", "),t("code",[s._v("json")]),s._v(" 。")]),s._v(" "),t("p",[t("code",[s._v("varchar")]),s._v(" 是一种可变长的字符串类型, 你可以指定一个可选的最大长度, 比如 "),t("code",[s._v("varchar")]),s._v(" 表示这个字段的长度没有上限(unbounded), 而 "),t("code",[s._v("varchar(10)")]),s._v(" 则表示这个字符串最大可以容纳10个字符，但是也可以只容纳5个字符，因此一个类型 "),t("code",[s._v("varchar(5)")]),s._v(" 的值跟一个"),t("code",[s._v("varchar(10)")]),s._v(" 的值是可能相等的。")]),s._v(" "),t("p",[t("code",[s._v("char")]),s._v(" 是一种定长的字符串类型，跟 "),t("code",[s._v("char")]),s._v(" 类似长度也是可选的, 你如果不写长度，那么默认长度就是1: "),t("code",[s._v("char == char(1)")]),s._v(" 。而如果你指定了长度，而最终你数据的长度又没有那么长，那么会在尾部自动填充空格, 比如我们定义了 "),t("code",[s._v("char(10)")]),s._v(" 类型的字段，我们填充一个 "),t("code",[s._v("hello")]),s._v(" 进去，那么最终存储的值其实是 "),t("code",[s._v("hello_____")]),s._v(" (因为显示问题，这里用下划线代替空格)，因此两个不同长度类型的 "),t("code",[s._v("char")]),s._v(" 的值是绝对不可能相等的。")]),s._v(" "),t("p",[t("code",[s._v("varbianry")]),s._v(" 表示的一种可变长的二进制字符串(binary string), 所谓的 bianry string也是一种string, 跟普通的string的区别在于普通的string是character string, 也就是说字符串里面的元素不一样: 一个是 "),t("code",[s._v("byte")]),s._v(", 一个是 "),t("code",[s._v("char")]),s._v("。 Trino里面的"),t("code",[s._v("varbinary")]),s._v("目前不接受最大长度的参数，也就是说所有的 "),t("code",[s._v("varbinary")]),s._v(" 都是unbounded。")]),s._v(" "),t("p",[t("code",[s._v("json")]),s._v(" 类型保存的JSON类型的数据，可能是简单类型: "),t("code",[s._v("string")]),s._v(", "),t("code",[s._v("boolean")]),s._v(", 数字, 也可能是复杂类型比如: JSONObject, JSONArray等等。")]),s._v(" "),t("h4",{attrs:{id:"_2-7-时间类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-7-时间类型"}},[s._v("#")]),s._v(" 2.7 时间类型")]),s._v(" "),t("p",[s._v("时间类型主要有7种: "),t("code",[s._v("date")]),s._v(", "),t("code",[s._v("time")]),s._v(", "),t("code",[s._v("time with time zone")]),s._v(", "),t("code",[s._v("timestamp")]),s._v(", "),t("code",[s._v("timestamp with time zone")]),s._v(", "),t("code",[s._v("interval year to month")]),s._v(", "),t("code",[s._v("interval day to second")]),s._v("。")]),s._v(" "),t("p",[t("code",[s._v("date")]),s._v(" 表示的是日期(不带时分秒部分)，Trino 里面是用从 "),t("code",[s._v("1970-01-01")]),s._v(" 到现在的天数来表示的, 从它的实现 "),t("code",[s._v("SqlDate")]),s._v(" 就可以看出来了:")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SqlDate")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" days"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// TODO accept long")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SqlDate")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" days"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("days "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" days"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("p",[t("code",[s._v("time")]),s._v(" 表示的是时间(不带日期部分), Trino内部保存的是从UTC的 "),t("code",[s._v("1970-01-01T00:00:00")]),s._v(" 到指定时间的毫秒数,由于时间跟时区是有关的，因此计算的时候一定会把当前session的时区传入加入计算的。")]),s._v(" "),t("p",[t("code",[s._v("timestamp")]),s._v(" 这是 "),t("code",[s._v("date")]),s._v(" 和 "),t("code",[s._v("time")]),s._v(" 的结合，既有日期，也有时间，而且也是从UTC的"),t("code",[s._v("1970-01-01T00:00:00")]),s._v("开始算的，这个 "),t("code",[s._v("timestamp")]),s._v(" 字段值的timezone取的是客户端的TimeZone.")]),s._v(" "),t("p",[t("code",[s._v("timestamp with time zone")]),s._v(" 顾名思义, 这个类型的数据的值里面是自带了时区的, 比如: "),t("code",[s._v("TIMESTAMP '2001-08-22 03:04:05.321 America/Los_Angeles'")]),s._v("。")]),s._v(" "),t("p",[s._v("剩下的两种数据类型是 "),t("code",[s._v("interval")]),s._v(" 类型的，表示时间的间隔。这两种类型貌似是从 Oracle 里面借鉴过来的，其中 "),t("code",[s._v("interval day to second")]),s._v(", 表示的是天、时、分、秒级别的时间间隔, Trino内部保存的是时间间隔用毫秒来表示的长度；而 "),t("code",[s._v("interval year tomonth")]),s._v(" 表示的这是年、月级别的时间间隔，Trino内部保存的月份的数量。")]),s._v(" "),t("h2",{attrs:{id:"_3、结构化数据类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、结构化数据类型"}},[s._v("#")]),s._v(" 3、结构化数据类型")]),s._v(" "),t("p",[s._v("Trino支持三种结构化的数据类型: "),t("code",[s._v("ARRAY")]),s._v(", "),t("code",[s._v("MAP")]),s._v(", "),t("code",[s._v("ROW")]),s._v("。")]),s._v(" "),t("h3",{attrs:{id:"_3-1-array"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-array"}},[s._v("#")]),s._v(" 3.1 Array")]),s._v(" "),t("p",[t("code",[s._v("ARRAY")]),s._v(" 很好理解，就是一个数组，数组里面的元素的类型必须一致.")]),s._v(" "),t("h3",{attrs:{id:"_3-2-map"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-map"}},[s._v("#")]),s._v(" 3.2 Map")]),s._v(" "),t("p",[t("code",[s._v("MAP")]),s._v(" 表示是一个映射类型，跟JSON不一样的是，所有的key的类型必须一致，所有value的类型也必须一致。在字面量里面，Trino是通过让用户指定两个有序ARRAY: 一个key的Array，一个value的Array来表达的.")]),s._v(" "),t("p",[s._v("在内存里面的表示，"),t("code",[s._v("MAP")]),s._v(" 的内容这是被保存成一个一个的key-value对，每一个kv对是相邻的：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//MapType.java")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("writeObject")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BlockBuilder")]),s._v(" blockBuilder"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("instanceof")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SingleMapBlock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throw")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IllegalArgumentException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Maps must be represented with SingleMapBlock"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SingleMapBlock")]),s._v(" singleMapBlock "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SingleMapBlock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BlockBuilder")]),s._v(" entryBuilder "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" blockBuilder"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("beginBlockEntry")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" singleMapBlock"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getPositionCount")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    keyType"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("appendTo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("singleMapBlock"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" entryBuilder"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    valueType"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("appendTo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("singleMapBlock"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" entryBuilder"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n  blockBuilder"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("closeEntry")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br")])]),t("h3",{attrs:{id:"_3-3-row"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-row"}},[s._v("#")]),s._v(" 3.3 Row")]),s._v(" "),t("p",[t("code",[s._v("ROW")]),s._v(" 表示的是一行记录，这行记录的数据可以是各种不同的类型。")]),s._v(" "),t("h2",{attrs:{id:"_4、ipaddress"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、ipaddress"}},[s._v("#")]),s._v(" 4、IpAddress")]),s._v(" "),t("p",[s._v("IpAddress它可以表示IPV4和IPV6的IP地址, 你可以通过下面的语句来试试这种类型:")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" foo "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n       a "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VARCHAR")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" \n       b "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BIGINT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n       c IPADDRESS\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("IPADDRESS之间可以进行比较, 支持一些操作包括 "),t("code",[s._v("=")]),s._v(", "),t("code",[s._v(">")]),s._v(", '<' 等等, 同时 IPADDRESS和 VARCHAR两种类型之间可以进行CAST。比如:")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("CAST "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ipaddress "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VARCHAR")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("因为IpAdress内部存储都是以IPV6的形式来存的(IPV4也会被转成IPV6), 而IPV6是128位的，因此从存储空间占用上来看，IpAddress类似于"),t("code",[s._v("BINARY(16)")]),s._v("。")]),s._v(" "),t("h2",{attrs:{id:"参考"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[s._v("#")]),s._v(" 参考")]),s._v(" "),t("p",[s._v("https://zhuanlan.zhihu.com/p/52713533")])],1)}),[],!1,null,null,null);t.default=e.exports}}]);